import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
from sklearn.utils import resample

df = pd.read_csv("diabetes.csv")
df

df.info()
df.describe()
df["Outcome"].value_counts()
sns.countplot(data=df, x=df["Outcome"])
plt.show()

negative_data = df[df["Outcome"] == 0]
positive_data = df[df["Outcome"] == 1]


positive_upsample = resample(positive_data,
                             replace=True,
                             n_samples=int(0.9*len(negative_data)),
                             random_state=42)

new_df = negative_data
new_df = pd.concat([new_df, positive_upsample], ignore_index=True)
new_df = new_df.sample(frac=1)

X = new_df.drop("Outcome", axis=1)
y = new_df[["Outcome"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)


y_pred = knn.predict(X_test)


conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")


error_rate = 1 - accuracy
print(f"Error Rate: {error_rate}")


precision = precision_score(y_test, y_pred)
print(f"Precision: {precision}")

recall = recall_score(y_test, y_pred)
print(f"Recall: {recall}")